// Import from `core` instead of from `std` since we are in no-std mode
use core::result::Result;

// Import CKB syscalls and structures
// https://docs.rs/ckb-std/
use ckb_auth_rs::{ckb_auth, AuthAlgorithmIdType, CkbAuthType, CkbEntryType, EntryCategoryType};
use ckb_std::ckb_types::core::ScriptHashType;

use crate::error::Error;

// ckb-cli util blake2b --binary-path deps/ckb-auth/build/auth_libecc
const AUTH_LIBECC_CODE_HASH: [u8; 32] = [
    0x76u8, 0x82u8, 0x85u8, 0x1cu8, 0x4bu8, 0x56u8, 0xcau8, 0x26u8, 0x69u8, 0xc1u8, 0xe5u8, 0x93u8,
    0x76u8, 0xfdu8, 0x8fu8, 0xd8u8, 0xcau8, 0xd0u8, 0x13u8, 0x86u8, 0x48u8, 0x5cu8, 0xb4u8, 0xbbu8,
    0xf0u8, 0xf8u8, 0xb2u8, 0x03u8, 0x00u8, 0xb9u8, 0x3fu8, 0x1cu8,
];

pub fn main() -> Result<(), Error> {
    let message = [
        0x29u8, 0x55u8, 0x3fu8, 0x9eu8, 0x37u8, 0xfau8, 0x16u8, 0xe4u8, 0x5fu8, 0x1du8, 0x3eu8,
        0x61u8, 0x6au8, 0xc5u8, 0x36u8, 0x6fu8, 0x6au8, 0xfdu8, 0x99u8, 0x36u8, 0x47u8, 0x7fu8,
        0x2du8, 0x6fu8, 0xc8u8, 0x70u8, 0xf4u8, 0x9bu8, 0xdfu8, 0x54u8, 0x01u8, 0x57u8,
    ];
    let signature = [
        // pubkey
        0xd5u8, 0x7fu8, 0x16u8, 0xb6u8, 0x82u8, 0xcau8, 0x91u8, 0xbeu8, 0x13u8, 0xe4u8, 0xd8u8,
        0x1bu8, 0x51u8, 0x6au8, 0xddu8, 0x12u8, 0xd8u8, 0x63u8, 0xe7u8, 0x50u8, 0x95u8, 0x5bu8,
        0x25u8, 0x1fu8, 0x22u8, 0x71u8, 0x24u8, 0xbeu8, 0x39u8, 0x60u8, 0xe5u8, 0x75u8, 0xdcu8,
        0x71u8, 0x57u8, 0x95u8, 0x12u8, 0x76u8, 0xe7u8, 0x3eu8, 0x15u8, 0xe9u8, 0x8fu8, 0x8au8,
        0x73u8, 0xeau8, 0xb9u8, 0x70u8, 0x54u8, 0x8eu8, 0x6cu8, 0x87u8, 0x07u8, 0xa3u8, 0xd4u8,
        0x92u8, 0x08u8, 0x8bu8, 0x83u8, 0xaau8, 0xf6u8, 0xd9u8, 0x42u8, 0x67u8,
        // signature
        0x99u8, 0xb1u8, 0xb3u8, 0x8fu8, 0x09u8, 0xe6u8, 0xeeu8, 0xe9u8, 0x0cu8, 0xe9u8, 0x12u8,
        0x43u8, 0xa1u8, 0xf2u8, 0xd5u8, 0x7cu8, 0x89u8, 0x82u8, 0x14u8, 0x55u8, 0x50u8, 0xaau8,
        0x0du8, 0x30u8, 0xfdu8, 0x94u8, 0x1eu8, 0x20u8, 0x40u8, 0xa6u8, 0x74u8, 0xf4u8, 0x35u8,
        0xa6u8, 0xf9u8, 0x4eu8, 0x7bu8, 0x53u8, 0xc0u8, 0x47u8, 0xa7u8, 0x72u8, 0x0du8, 0x19u8,
        0x94u8, 0x24u8, 0xaau8, 0xe0u8, 0x8cu8, 0x8cu8, 0x0fu8, 0x85u8, 0x26u8, 0x0cu8, 0x30u8,
        0xa3u8, 0xa9u8, 0x4bu8, 0x61u8, 0x74u8, 0x2au8, 0xfau8, 0x10u8, 0xb5u8,
    ];
    // ckb_hash(pubkey)[0..20]
    let pubkey_hash = [
        0x69u8, 0x28u8, 0x8au8, 0x96u8, 0x85u8, 0x7au8, 0x75u8, 0x50u8, 0x5bu8, 0x53u8, 0x07u8,
        0x0bu8, 0x20u8, 0x1eu8, 0x17u8, 0xbau8, 0x3fu8, 0xc2u8, 0x66u8, 0x4au8,
    ];
    let id = CkbAuthType {
        algorithm_id: AuthAlgorithmIdType::Secp256r1,
        pubkey_hash,
    };

    let entry = CkbEntryType {
        code_hash: AUTH_LIBECC_CODE_HASH,
        hash_type: ScriptHashType::Data1,
        entry_category: EntryCategoryType::DynamicLinking,
    };

    ckb_auth(&entry, &id, &signature, &message)?;

    Ok(())
}
