// Import from `core` instead of from `std` since we are in no-std mode
use core::result::Result;

use ckb_std::debug;
use p256::ecdsa::{signature::Verifier, Signature, VerifyingKey};

use crate::error::Error;

pub fn main() -> Result<(), Error> {
    let message = [
        0x29u8, 0x55u8, 0x3fu8, 0x9eu8, 0x37u8, 0xfau8, 0x16u8, 0xe4u8, 0x5fu8, 0x1du8, 0x3eu8,
        0x61u8, 0x6au8, 0xc5u8, 0x36u8, 0x6fu8, 0x6au8, 0xfdu8, 0x99u8, 0x36u8, 0x47u8, 0x7fu8,
        0x2du8, 0x6fu8, 0xc8u8, 0x70u8, 0xf4u8, 0x9bu8, 0xdfu8, 0x54u8, 0x01u8, 0x57u8,
    ];
    let pubkey = [
        // pubkey
        0x04u8, 0xd5u8, 0x7fu8, 0x16u8, 0xb6u8, 0x82u8, 0xcau8, 0x91u8, 0xbeu8, 0x13u8, 0xe4u8,
        0xd8u8, 0x1bu8, 0x51u8, 0x6au8, 0xddu8, 0x12u8, 0xd8u8, 0x63u8, 0xe7u8, 0x50u8, 0x95u8,
        0x5bu8, 0x25u8, 0x1fu8, 0x22u8, 0x71u8, 0x24u8, 0xbeu8, 0x39u8, 0x60u8, 0xe5u8, 0x75u8,
        0xdcu8, 0x71u8, 0x57u8, 0x95u8, 0x12u8, 0x76u8, 0xe7u8, 0x3eu8, 0x15u8, 0xe9u8, 0x8fu8,
        0x8au8, 0x73u8, 0xeau8, 0xb9u8, 0x70u8, 0x54u8, 0x8eu8, 0x6cu8, 0x87u8, 0x07u8, 0xa3u8,
        0xd4u8, 0x92u8, 0x08u8, 0x8bu8, 0x83u8, 0xaau8, 0xf6u8, 0xd9u8, 0x42u8, 0x67u8,
    ];
    let signature = [
        // signature
        0x99u8, 0xb1u8, 0xb3u8, 0x8fu8, 0x09u8, 0xe6u8, 0xeeu8, 0xe9u8, 0x0cu8, 0xe9u8, 0x12u8,
        0x43u8, 0xa1u8, 0xf2u8, 0xd5u8, 0x7cu8, 0x89u8, 0x82u8, 0x14u8, 0x55u8, 0x50u8, 0xaau8,
        0x0du8, 0x30u8, 0xfdu8, 0x94u8, 0x1eu8, 0x20u8, 0x40u8, 0xa6u8, 0x74u8, 0xf4u8, 0x35u8,
        0xa6u8, 0xf9u8, 0x4eu8, 0x7bu8, 0x53u8, 0xc0u8, 0x47u8, 0xa7u8, 0x72u8, 0x0du8, 0x19u8,
        0x94u8, 0x24u8, 0xaau8, 0xe0u8, 0x8cu8, 0x8cu8, 0x0fu8, 0x85u8, 0x26u8, 0x0cu8, 0x30u8,
        0xa3u8, 0xa9u8, 0x4bu8, 0x61u8, 0x74u8, 0x2au8, 0xfau8, 0x10u8, 0xb5u8,
    ];

    let verifying_key = VerifyingKey::from_sec1_bytes(&pubkey).map_err(|err| {
        debug!("PublicKeyFormatError: {}", err);
        Error::PublicKeyFormatError
    })?;
    let signature = Signature::from_slice(&signature).map_err(|err| {
        debug!("SignatureFormatError: {}", err);
        Error::SignatureFormatError
    })?;

    verifying_key.verify(&message, &signature).map_err(|err| {
        debug!("SignatureVerifyingError: {}", err);
        Error::SignatureVerifyingError
    })?;

    Ok(())
}
